#!/usr/bin/env ruby
require 'sqlite3'
require './bootstrap_ar'
require 'csv'
require './modules/import_data_into_db.rb'
require './modules/display_help_menu.rb'
require './modules/more_modules.rb'
require 'pry'
require "highline/import"


# define input variables
command = ARGV[0]
search_string = ARGV[1]

def empty_string_error
  "\nYou left the seach string empty.\nPlease run \"phone -h\" for help\n\n"
end

empty_string_or_flag_error = "\nInvalid Flag or empty search string,\nCheck your spelling or run \"phone -h\" for help.\n\n"

# List all items in DB
if command == "-list"
  list_all_users

# List Help commands
elsif command == "-h" || command == "-help"
  display_help_menu

# Clear the Database
elsif command == "-delete_all_records"
  matching_projects = User.all
  matching_projects.each do |user|
    User.destroy_all
  end
  puts "\nAll Data Entries Deleted\n\n"

# Read in a CSV file
elsif command == "-i" || command == "-in"
  if search_string.nil?
    puts "#{empty_string_error}"
  else
    User.destroy_all
    filename = search_string
    write_user_info_to_db(filename)
  end

elsif command == "-add"
#   firstname = search_string
#   # User.create(name: firstname)
#    User.create(firstname)
  puts "\nEnter the following information about your user:\n\n"
  firstname = ask "First Name: "
  lastname = ask "Last Name: "
  phone = ask "phone: "
  email = ask "email: "
  github = ask "Github username: "
  github = "www.github.com/"+ github
  part_of_town = ask "Part of Town: "
  clean_phone = phone.gsub(".","-")
  result = "\n==================\e[47m\nName:   #{firstname} #{lastname}\e[0m\nEmail:  #{email}\n\e[47mPhone:  #{clean_phone}\e[0m\nGithub: #{github}\n\e[47mTown:   #{part_of_town}\e[0m\n\n"

  puts "\nDoes the following look correct?\n \nNew User Entry#{result}"
  confirm = ask "(y)es or (n)o: "
  if confirm == 'y'
        user = User.create(:firstname => firstname, :lastname => lastname, :phone => phone, :email => email, :github => github, :part_of_town => part_of_town)
        puts "User #{user.firstname} entered into db."
      else
        puts "\nUser creation aborted.\n\n"
      end

elsif command == "-remove"
  firstname = search_string
  matching_projects = User.where(firstname: firstname).all
  if matching_projects != []
    matching_projects.each do |user|
      clean_phone = user.phone.gsub(".","-")
      result = "\n==================\e[47m\nName:   #{user.firstname} #{user.lastname}\e[0m\nEmail:  #{user.email}\n\e[47mPhone:  #{clean_phone}\e[0m\nGithub: #{user.github}\n\e[47mTown:   #{user.part_of_town}\e[0m\n\n"
      puts "\nAre you sure you want to delete user:\n\nDoes the following look correct?\n\nUser to be Deleted#{result}\n\n"
      confirm = ask "(y)es or (n)o: "
      if confirm == 'y'
        user.delete
        puts "\nUser \"#{firstname}\" has been deleted.\n\n"
      else
        puts "\nDelete aborted.\n\n"
      end
    end
  else
    puts "\nNo user found with that firstname.\n\n"
  end
# end

#Validation of flag and empty input, then return results if passes.
else
  if %w{-fn -ln -town}.include?(command)
      search_results(command, search_string)
  else
    puts "#{empty_string_or_flag_error}"
  end
end